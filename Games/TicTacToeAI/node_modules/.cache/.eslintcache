[{"C:\\Users\\USER\\Desktop\\TicTacToeAI\\src\\index.js":"1","C:\\Users\\USER\\Desktop\\TicTacToeAI\\src\\app.js":"2","C:\\Users\\USER\\Desktop\\TicTacToeAI\\src\\components\\Button.jsx":"3","C:\\Users\\USER\\Desktop\\TicTacToeAI\\src\\components\\Square.jsx":"4","C:\\Users\\USER\\Desktop\\GameZone\\Games\\TicTacToeAI\\src\\index.js":"5","C:\\Users\\USER\\Desktop\\GameZone\\Games\\TicTacToeAI\\src\\app.js":"6","C:\\Users\\USER\\Desktop\\GameZone\\Games\\TicTacToeAI\\src\\components\\Button.jsx":"7","C:\\Users\\USER\\Desktop\\GameZone\\Games\\TicTacToeAI\\src\\components\\Square.jsx":"8"},{"size":263,"mtime":1687463445714,"results":"9","hashOfConfig":"10"},{"size":7045,"mtime":1687463752162,"results":"11","hashOfConfig":"10"},{"size":132,"mtime":1686165307935,"results":"12","hashOfConfig":"10"},{"size":672,"mtime":1686165329414,"results":"13","hashOfConfig":"10"},{"size":263,"mtime":1687463445714,"results":"14","hashOfConfig":"15"},{"size":7045,"mtime":1687463752162,"results":"16","hashOfConfig":"15"},{"size":132,"mtime":1686165307935,"results":"17","hashOfConfig":"15"},{"size":672,"mtime":1686165329414,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mqvbfb",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zg0v1w",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\USER\\Desktop\\TicTacToeAI\\src\\index.js",[],[],"C:\\Users\\USER\\Desktop\\TicTacToeAI\\src\\app.js",["44"],[],"import { motion, AnimatePresence } from \"framer-motion\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Button from \"./components/Button\";\r\nimport Square from \"./components/Square\";\r\nimport \"./index.css\";\r\n\r\nfunction App() {\r\n    const [squares, setSquares] = useState(Array(9).fill(\"\"));\r\n    const [turn, setTurn] = useState(\"x\");\r\n    const [winner, setWinner] = useState(null);\r\n\r\n    const checkEndTheGame = () => {\r\n        for (let square of squares) {\r\n            if (!square) return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const checkWinner = () => {\r\n        const combos = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n\r\n        for (let combo of combos) {\r\n            const [a, b, c] = combo;\r\n            if (\r\n                squares[a] &&\r\n                squares[a] === squares[b] &&\r\n                squares[a] === squares[c]\r\n            ) {\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const updateSquares = (ind) => {\r\n        if (squares[ind] || winner) {\r\n            return;\r\n        }\r\n        const s = squares;\r\n        s[ind] = turn;\r\n        setSquares(s);\r\n        setTurn(turn === \"x\" ? \"o\" : \"x\");\r\n        const W = checkWinner();\r\n        if (W) {\r\n            setWinner(W);\r\n        } else if (checkEndTheGame()) {\r\n            setWinner(\"x | o\");\r\n        }\r\n    };\r\n\r\n    const resetGame = () => {\r\n        setSquares(Array(9).fill(\"\"));\r\n        setTurn(\"x\");\r\n        setWinner(null);\r\n    };\r\n\r\n    const minimax = (squares, depth, isMaximizingPlayer) => {\r\n        const winner = checkWinner();\r\n        if (winner !== null) {\r\n            return winner === 'o' ? 10 - depth : depth - 10;\r\n        }\r\n\r\n        if (checkEndTheGame()) {\r\n            return 0;\r\n        }\r\n\r\n        if (isMaximizingPlayer) {\r\n            let maxEval = -Infinity;\r\n            for (let i = 0; i < squares.length; i++) {\r\n                if (squares[i] === \"\") {\r\n                    squares[i] = 'o';\r\n                    const evaluation = minimax(squares, depth + 1, false);\r\n                    squares[i] = \"\";\r\n                    maxEval = Math.max(maxEval, evaluation);\r\n                }\r\n            }\r\n            return maxEval;\r\n        } else {\r\n            let minEval = Infinity;\r\n            for (let i = 0; i < squares.length; i++) {\r\n                if (squares[i] === \"\") {\r\n                    squares[i] = 'x';\r\n                    const evaluation = minimax(squares, depth + 1, true);\r\n                    squares[i] = \"\";\r\n                    minEval = Math.min(minEval, evaluation);\r\n                }\r\n            }\r\n            return minEval;\r\n        }\r\n    };\r\n\r\n    const bestMove = () => {\r\n        let bestEval = -Infinity;\r\n        let move = null;\r\n        for (let i = 0; i < squares.length; i++) {\r\n            if (squares[i] === \"\") {\r\n                squares[i] = 'o';\r\n                const evaluation = minimax(squares, 0, false);\r\n                squares[i] = \"\";\r\n                if (evaluation > bestEval) {\r\n                    bestEval = evaluation;\r\n                    move = i;\r\n                }\r\n            }\r\n        }\r\n        updateSquares(move);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (turn === 'o') {\r\n            bestMove();\r\n        }\r\n    }, [turn]);\r\n\r\n    return (\r\n        <div className=\"tic-tac-toe\">\r\n            <h1> TIC-TAC-TOE </h1>\r\n            <Button resetGame={resetGame} />\r\n            <div className=\"game\">\r\n                {Array.from(\"012345678\").map((ind) => (\r\n                    <Square\r\n                        key={ind}\r\n                        ind={ind}\r\n                        updateSquares={updateSquares}\r\n                        clsName={squares[ind]}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <AnimatePresence>\r\n                {winner && (\r\n                    <motion.div\r\n                        key={\"parent-box\"}\r\n                        initial={{ opacity: 0 }}\r\n                        animate={{ opacity: 1 }}\r\n                        exit={{ opacity: 0 }}\r\n                        className=\"winner\"\r\n                    >\r\n                        <motion.div\r\n                            key={\"child-box\"}\r\n                            initial={{ scale: 0 }}\r\n                            animate={{ scale: 1 }}\r\n                            exit={{ scale: 0, opacity: 0 }}\r\n                            className=\"text\"\r\n                        >\r\n                            <motion.h2\r\n                                initial={{ scale: 0, y: 100 }}\r\n                                animate={{\r\n                                    scale: 1,\r\n                                    y: 0,\r\n                                    transition: {\r\n                                        y: { delay: 0.7 },\r\n                                        duration: 0.7,\r\n                                    },\r\n                                }}\r\n                            >\r\n                                {\r\n                                    winner === \"x\" ? \"You won :)\" : winner === \"o\" ? \"You lost :(\" : \"No winner :/\"\r\n                                }\r\n                            </motion.h2>\r\n                            <motion.div\r\n                                initial={{ scale: 0 }}\r\n                                animate={{\r\n                                    scale: 1,\r\n                                    transition: {\r\n                                        delay: 1.3,\r\n                                        duration: 0.2,\r\n                                    },\r\n                                }}\r\n                                className=\"win\"\r\n                            >\r\n                                {winner === \"x | o\" ? (\r\n                                    <>\r\n                                        <Square clsName=\"x\" />\r\n                                        <Square clsName=\"o\" />\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <Square clsName={winner} />\r\n                                    </>\r\n                                )}\r\n                            </motion.div>\r\n                            <motion.div\r\n                                initial={{ scale: 0 }}\r\n                                animate={{\r\n                                    scale: 1,\r\n                                    transition: { delay: 1.5, duration: 0.3 },\r\n                                }}\r\n                            >\r\n                                <Button resetGame={resetGame} />\r\n                            </motion.div>\r\n                        </motion.div>\r\n                    </motion.div>\r\n                )}\r\n            </AnimatePresence>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","C:\\Users\\USER\\Desktop\\TicTacToeAI\\src\\components\\Button.jsx",[],[],"C:\\Users\\USER\\Desktop\\TicTacToeAI\\src\\components\\Square.jsx",[],[],"C:\\Users\\USER\\Desktop\\GameZone\\Games\\TicTacToeAI\\src\\index.js",[],[],"C:\\Users\\USER\\Desktop\\GameZone\\Games\\TicTacToeAI\\src\\app.js",["45"],[],"C:\\Users\\USER\\Desktop\\GameZone\\Games\\TicTacToeAI\\src\\components\\Button.jsx",[],[],"C:\\Users\\USER\\Desktop\\GameZone\\Games\\TicTacToeAI\\src\\components\\Square.jsx",[],[],{"ruleId":"46","severity":1,"message":"47","line":122,"column":8,"nodeType":"48","endLine":122,"endColumn":14,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"47","line":122,"column":8,"nodeType":"48","endLine":122,"endColumn":14,"suggestions":"50"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'bestMove'. Either include it or remove the dependency array.","ArrayExpression",["51"],["52"],{"desc":"53","fix":"54"},{"desc":"53","fix":"55"},"Update the dependencies array to be: [bestMove, turn]",{"range":"56","text":"57"},{"range":"58","text":"57"},[3467,3473],"[bestMove, turn]",[3467,3473]]